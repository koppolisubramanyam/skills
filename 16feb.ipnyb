
Assignment
1.What is a database? Differentiate between SQL and NoSQL databases.
A database is a structured collection of data that is stored and organized in a way that allows for efficient retrieval and manipulation of the data. Databases are used in a wide variety of applications, from small-scale personal projects to large-scale enterprise systems.

SQL and NoSQL are two different types of databases that differ in their data models, querying languages, and performance characteristics.

SQL (Structured Query Language) databases are based on the relational model, in which data is organized into tables with rows and columns. SQL databases use a schema to define the structure of the data, and queries are made using SQL, a standard language for accessing and manipulating relational data. SQL databases are well-suited for applications that require complex querying, transactional consistency, and data integrity, such as financial systems, e-commerce sites, and content management systems.

NoSQL (Not Only SQL) databases, on the other hand, are based on non-relational data models, such as document-based, key-value, and graph databases. NoSQL databases are designed to handle large volumes of unstructured or semi-structured data that may not fit neatly into a table, such as JSON or XML documents. NoSQL databases are typically optimized for high availability, scalability, and performance, and are commonly used in applications that require real-time data processing, such as social media, IoT, and gaming.
Here are some key differences between SQL and NoSQL databases:

1.Data Model: SQL databases are based on the relational data model, which organizes data into tables with rows and columns, and enforces strict data consistency and integrity through the use of constraints and transactions. NoSQL databases, on the other hand, use a variety of non-relational data models, such as document-based, key-value, and graph, which are designed to handle unstructured or semi-structured data with flexible schemas.

2.Querying Language: SQL databases use the SQL language to query and manipulate data, which is a declarative language that allows for complex joins, subqueries, and aggregation. NoSQL databases typically use their own query languages, which are often based on simple key-value lookups or document queries, and may not support complex querying.

3.Scalability and Performance: NoSQL databases are often designed to be horizontally scalable, meaning that they can be distributed across multiple nodes to handle large volumes of data and high traffic loads. SQL databases can also be scaled horizontally, but often require more effort and expertise to set up. NoSQL databases are generally designed to have high performance for specific types of queries or workloads, such as document retrieval or key-value lookups.

4.Data Consistency and Integrity: SQL databases are designed to enforce strict data consistency and integrity through the use of transactions, constraints, and other mechanisms that ensure that data is accurate and reliable. NoSQL databases may sacrifice some degree of consistency or durability for increased performance and scalability, and often rely on eventual consistency or other techniques to ensure data integrity.
2.What is DDL? Explain why CREATE, DROP, ALTER, and TRUNCATE are used with an example.
  DDL stands for Data Definition Language, which is a subset of SQL used to define and manage the structure of a database. DDL statements are used to create, modify, and delete database objects such as tables, indexes, and constraints. Here are some common DDL statements and their uses:

1.CREATE: The CREATE statement is used to create new database objects, such as tables, indexes, and constraints. For example, the following SQL statement creates a new table called customers with three columns (id, name, and email):
CREATE TABLE customers (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(50)
);
2.DROP: The DROP statement is used to delete existing database objects, such as tables, indexes, and constraints. For example, the following SQL statement drops the customers table:
DROP TABLE customers;
3.ALTER: The ALTER statement is used to modify the structure of existing database objects, such as tables and columns. For example, the following SQL statement adds a new column called phone to the customers table:
ALTER TABLE customers ADD phone VARCHAR(20);
4.TRUNCATE: The TRUNCATE statement is used to delete all the data from a table, while preserving its structure. For example, the following SQL statement deletes all the data from the customers table:
TRUNCATE TABLE customers;
In summary, DDL statements are used to define and manage the structure of a database, including creating, modifying, and deleting database objects such as tables, indexes, and constraints. The CREATE statement is used to create new objects, the DROP statement is used to delete existing objects, the ALTER statement is used to modify existing objects, and the TRUNCATE statement is used to delete all the data from a table while preserving its structure.
3.What is DML? Explain INSERT, UPDATE, and DELETE with an example.
DML stands for Data Manipulation Language, which is a subset of SQL used to insert, update, and delete data in a database. Here are some common DML statements and their uses:
1.INSERT: The INSERT statement is used to insert new data into a table. For example, the following SQL statement inserts a new record into the customers table:
INSERT INTO customers (id, name, email) VALUES (1, 'John Doe', 'johndoe@example.com');
2.UPDATE: The UPDATE statement is used to modify existing data in a table. For example, the following SQL statement updates the email address for the customer with an id of 1:
UPDATE customers SET email = 'johndoe123@example.com' WHERE id = 1;
3.DELETE: The DELETE statement is used to delete data from a table. For example, the following SQL statement deletes the record for the customer with an id of 1:
DELETE FROM customers WHERE id = 1;
In summary, DML statements are used to manipulate data in a database, including inserting new data with the INSERT statement, modifying existing data with the UPDATE statement, and deleting data with the DELETE statement. Each statement is used in a different way, but they all serve the purpose of manipulating the data stored in a database.
4.What is DQL? Explain SELECT with an example.
DQL stands for Data Query Language, which is a subset of SQL used to retrieve and query data from a database. The most common DQL statement is the SELECT statement, which is used to retrieve data from one or more tables in a database. Here is an example of a SELECT statement:
Suppose we have a table named employees with the following columns: id, name, email, salary, and department. To retrieve all the employees in the sales department with a salary greater than 50000, we can use the following SQL statement:
SELECT * FROM employees WHERE department = 'sales' AND salary > 50000;
This statement will retrieve all the columns for all the employees in the sales department with a salary greater than 50000. The * wildcard character is used to select all columns from the table. We then specify the table we want to select from (employees), and use the WHERE clause to filter the results based on our criteria.

We can also select specific columns from the table using the SELECT statement. For example, to retrieve only the name and email columns for all employees in the sales department with a salary greater than 50000, we can use the following SQL statement:
SELECT name, email FROM employees WHERE department = 'sales' AND salary > 50000;
This statement will only retrieve the name and email columns for all employees in the sales department with a salary greater than 50000.

In summary, the SELECT statement is used to retrieve data from one or more tables in a database. It allows you to select all columns using the * wildcard character, or specific columns by name. You can also use the WHERE clause to filter the results based on your criteria.
5.Explain Primary Key and Foreign Key.
  In a relational database, a primary key and a foreign key are used to define the relationships between tables. Here is an explanation of each:

1.Primary Key: A primary key is a column or group of columns in a table that uniquely identifies each row in the table. It is used to enforce data integrity and ensure that each row in the table is unique. A primary key cannot contain null values and must be unique for each row in the table. Typically, a primary key is defined when the table is created using the CREATE TABLE statement. For example, in a table of employees, the id column could be defined as the primary key, as each employee would have a unique id value.

2.Foreign Key: A foreign key is a column or group of columns in a table that refers to the primary key of another table. It is used to create a relationship between two tables, and to enforce referential integrity between them. A foreign key must match the data type and format of the primary key it references, and it must be unique for each row in the table. For example, in a table of orders, the customer_id column could be defined as a foreign key, as it refers to the id column in the customers table.
6.Write a python code to connect MySQL to python. Explain the cursor() and execute() method.
import mysql.connector

# establish a connection
mydb = mysql.connector.connect(
  host="localhost",
  user="rudra",
  password="password",
)

# create a cursor object
mycursor = mydb.cursor()

# execute a query
mycursor.execute("SELECT * FROM customers")

# fetch the results
result = mycursor.fetchall()

# print the results
for row in result:
  print(row)
 In this example, we first establish a connection to the MySQL database using the connect() method from the mysql.connector library. We specify the host, username, password, and database name as parameters to the method.

Next, we create a cursor object using the cursor() method on the connection object. The cursor object allows us to execute queries and fetch results from the database.

We then execute a query using the execute() method on the cursor object. In this case, we execute a SELECT statement to retrieve all the rows from the customers table.

Finally, we fetch the results using the fetchall() method on the cursor object, which returns all the rows as a list of tuples. We then loop through the results and print each row.

In summary, the cursor() method is used to create a cursor object, which allows us to execute queries and fetch results from the database. The execute() method is used to execute a query on the cursor object, and the fetchall() method is used to retrieve the results of the query as a list of tuples.
7.Give the order of execution of SQL clauses in an SQL query.
In an SQL query, the order of execution of the various clauses is as follows:
1.FROM: This clause specifies the table or tables from which the data will be retrieved.

2.JOIN: This clause is used to join multiple tables together based on a common column.

3.WHERE: This clause is used to filter the rows that match a certain condition.

4.GROUP BY: This clause is used to group the results based on one or more columns.

5.HAVING: This clause is used to filter the groups that match a certain condition.

6.SELECT: This clause is used to select the columns to be included in the results.

7.DISTINCT: This clause is used to remove duplicates from the results.

8.ORDER BY: This clause is used to sort the results based on one or more columns.

9.LIMIT: This clause is used to limit the number of rows returned by the query.

It's important to note that not all of these clauses are required for every SQL query. The order of execution may also vary based on the specific query being executed. However, in general, this is the typical order of execution for the clauses in an SQL query.

 
