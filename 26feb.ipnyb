
Consider the below code to answer further questions:
import numpy as np
list_ = [ ‘1’ , ’2’ , ‘3’ , ‘4’ , ‘5’ ]
array_list = np.array(object = list_)
Q1. Is there any difference in the data type of variables list_ and array_list? If there is then write a code to print the data types of both the variables.
In the given code, there is a difference in the data types of variables list_ and array_list.
The variable list_ is a Python list, which can hold elements of different data types.

The variable array_list is a NumPy array, which is a specialized data structure that holds elements of the same data type. In this case, since the elements in list_ are strings, array_list will also contain elements of the data type string.

To print the data types of both variables, you can use the type() function in Python:

import numpy as np

list_ = ['1', '2', '3', '4', '5']
array_list = np.array(object=list_)

print("Data type of list_:", type(list_))
print("Data type of array_list:", type(array_list))
Data type of list_: <class 'list'>
Data type of array_list: <class 'numpy.ndarray'>
Q2. Write a code to print the data type of each and every element of both the variables list_ and arra_list.
import numpy as np

list_ = ['1', '2', '3', '4', '5']
array_list = np.array(object=list_)

# Data type of each element in the 'list_'
print("Data type of each element in 'list_':")
for element in list_:
    print(type(element))

# Data type of each element in the 'array_list'
print("\nData type of each element in 'array_list':")
for element in array_list:
    print(type(element))
Data type of each element in 'list_':
<class 'str'>
<class 'str'>
<class 'str'>
<class 'str'>
<class 'str'>

Data type of each element in 'array_list':
<class 'numpy.str_'>
<class 'numpy.str_'>
<class 'numpy.str_'>
<class 'numpy.str_'>
<class 'numpy.str_'>
Q3. Considering the following changes in the variable, array_list:
array_list = np.array(object = list_, dtype = int)

Will there be any difference in the data type of the elements present in both the variables, list_ and arra_list? If so then print the data types of each and every element present in both the variables, list_ and arra_list.

Consider the below code to answer further questions:

import numpy as np num_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] num_array = np.array(object = num_list)

Yes, there will be a difference in the data type of the elements present in list_ and array_list after making the following change:
import numpy as np

list_ = ['1', '2', '3', '4', '5']
array_list = np.array(object=list_, dtype=int)

# Data type of each element in the 'list_'
print("Data type of each element in 'list_':")
for element in list_:
    print(type(element))

# Data type of each element in the 'array_list'
print("\nData type of each element in 'array_list':")
for element in array_list:
    print(type(element))
Data type of each element in 'list_':
<class 'str'>
<class 'str'>
<class 'str'>
<class 'str'>
<class 'str'>

Data type of each element in 'array_list':
<class 'numpy.int64'>
<class 'numpy.int64'>
<class 'numpy.int64'>
<class 'numpy.int64'>
<class 'numpy.int64'>
Q4. Write a code to find the following characteristics of variable, num_array:
(i) shape (ii) size

import numpy as np

num_list = [[1, 2, 3], [4, 5, 6]]
num_array = np.array(object=num_list)

# Shape of the 'num_array'
print("Shape of 'num_array':", num_array.shape)

# Size of the 'num_array'
print("Size of 'num_array':", num_array.size)
Shape of 'num_array': (2, 3)
Size of 'num_array': 6
Q5. Write a code to create numpy array of 3*3 matrix containing zeros only, using a numpy array creation function.
[Hint: The size of the array will be 9 and the shape will be (3,3).]

import numpy as np

# Create a 3x3 matrix containing zeros
zero_matrix = np.zeros((3, 3))

print(zero_matrix)
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
Q6. Create an identity matrix of shape (5,5) using numpy functions?
[Hint: An identity matrix is a matrix containing 1 diagonally and other elements will be 0.]

import numpy as np

# Create a 5x5 identity matrix
identity_matrix = np.eye(5)

print(identity_matrix)
[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]
