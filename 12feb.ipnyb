
Assignment
1.What is an Exception in python? Write the difference between Exception and Syntax errors.
An Exception in Python is an event that occurs during program execution that disrupts the normal flow of program instructions. When an exception occurs, Python creates an Exception object and searches for a section of code called an exception handler that can handle the exception.
Syntax errors, on the other hand, occur when the syntax of the code is incorrect, causing the interpreter to be unable to parse the code. Syntax errors are detected by the interpreter during the compilation of the program and are raised before the program is executed.
The main difference between Exception and Syntax errors is that Syntax errors are raised when there is a problem with the code structure, whereas Exceptions are raised when the program encounters a problem during execution, such as when it tries to access a non-existent file or when it attempts to divide by zero.
2.What happens when an exception is not handled? Explain with an example.
When an exception is not handled, it propagates up the call stack until it reaches the top level of the program, causing the program to terminate and printing a traceback of the error message.
#Here's an example that demonstrates what happens when an exception is not handled:
def divide_by_zero():
    return 1/0

def run():
    divide_by_zero()

run()
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
Cell In[2], line 8
      5 def run():
      6     divide_by_zero()
----> 8 run()

Cell In[2], line 6, in run()
      5 def run():
----> 6     divide_by_zero()

Cell In[2], line 3, in divide_by_zero()
      2 def divide_by_zero():
----> 3     return 1/0

ZeroDivisionError: division by zero
In this example, the divide_by_zero function attempts to divide the number 1 by 0, which results in a ZeroDivisionError exception being raised.
3.Which python statements are used to catch and exceptions? Explain with an example.
In Python, the try and except statements are used to catch and handle exceptions.
   The basic syntax for using try and except statements is as follows:
 try:
     # code that might raise an exception
 except ExceptionType:
     # code to handle the exception
The try block contains the code that might raise an exception, and the except block contains the code that handles the exception if one occurs. If an exception occurs in the try block, Python looks for an except block that matches the type of exception that was raised. If a matching except block is found, the code inside the except block is executed to handle the exception.
Here's an example that demonstrates how to use try and except statements to catch and handle exceptions:
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: division by zero")
    else:
        print("Result:", result)

divide(4, 2)   
divide(4, 0)   
Result: 2.0
Error: division by zero
In this example, the divide function attempts to divide x by y, but it uses a try block to handle the case where y is equal to zero and a ZeroDivisionError exception is raised. If a ZeroDivisionError exception is raised, the except block is executed, which prints an error message. If no exception is raised, the else block is executed, which prints the result of the division. The output of the example shows that the function handles the exception correctly and continues to execute even if an exception is raised.
4. Explain with an example:
  a) try and else
  b) finally
  c) raise
a) try and else:
 The else block in Python's try/except statements is optional and is executed if no exception is raised in the try block. 
try:
    x = 10 / 2
except ZeroDivisionError:
    print("Cannot divide by zero")
else:
    print("Result:", x)
Result: 5.0
In this example, the try block tries to divide the number 10 by 2, which is a valid operation and doesn't raise a ZeroDivisionError. Therefore, the else block is executed, which prints the result of the division, "Result: 5".
b) finally:
The finally block in Python's try/except statements is also optional and is always executed, regardless of whether an exception was raised or not. 
try:
    f = open("myfile.txt")
    data = f.read()
finally:
    f.close()
In this example, the try block tries to open a file and read its contents. The finally block ensures that the file is always closed, even if an exception was raised while reading the file.
c) raise:
The raise statement in Python is used to manually raise an exception.
def divide(x, y):
    if y == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    return x / y

try:
    result = divide(10, 0)
except ZeroDivisionError as e:
    print(e)
Cannot divide by zero
In this example, the divide function raises a ZeroDivisionError exception if the y parameter is equal to 0. The try block calls the divide function with y = 0, which raises a ZeroDivisionError. The except block catches the exception and prints the error message "Cannot divide by zero".
5.What are the Custom Exception in python? Why do we need custom exception.Explain with an example.
  Custom exceptions in Python are user-defined exceptions that allow you to create your own exception types that can be raised in response to specific situations. They are useful when you want to raise an exception that is not covered by the built-in exception types or when you want to create more specific exception types for your application.

 To define a custom exception in Python, you need to create a new class that inherits from the built-in Exception class or one of its subclasses.
Custom exceptions can be useful when you want to provide more specific error messages to users of your code, or when you want to provide more information about the specific cause of an error. For example, if you were writing a library for working with a specific API and the API returned a specific error code, you could define a custom exception for that error code to make it easier for users of your library to handle that error.
class APICallError(Exception):
    def __init__(self, code, message):
        self.code = code
        self.message = message

try:
    # make API call
    response = make_api_call()
    if response.status_code != 200:
        raise APICallError(response.status_code, response.text)
except APICallError as e:
    print(f"API call failed with error code {e.code}: {e.message}")
6.Create a custom Exception class and use this class to handle an exception.
class MyException(Exception):
    pass

try:
    # Some code that might raise an exception
    raise MyException("Something went wrong!")
except MyException as e:
    print("MyException was raised:", e)
MyException was raised: Something went wrong!
In this example, the MyException class is defined by inheriting from the built-in Exception class. We also define an empty pass statement to indicate that this class does not have any additional functionality beyond what is provided by Exception.

 We then use a try-except block to catch any MyException that might be raised. If an exception of type MyException is raised within the try block, the program will jump directly to the except block and the error message will be printed.

You can customize the behavior of the MyException class by adding additional methods or attributes, and you can raise the exception from any part of your code where an error occurs that you want to handle in a special way.



 
